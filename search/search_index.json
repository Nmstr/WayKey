{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WayKey","text":"<p>WayKey is a wayland automation tool.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#manual-recommended","title":"Manual (Recommended)","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone git@github.com:Nmstr/WayKey.git\ncd WayKey\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>uv sync\n</code></pre></p> </li> <li> <p>Create links: <pre><code>sudo ln -s $(pwd)/WayKey/cli/run.sh /usr/bin/waykey\nsudo ln -s $(pwd)/WayKey/daemon/run.sh /usr/bin/waykeyd\n</code></pre></p> </li> </ol>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Start the daemon: <pre><code>waykeyd\n# or\nsudo waykeyd\n</code></pre></p> <p>Click a Key: <pre><code>waykey click KEY_A\n# or\nsudo waykey click KEY_A\n</code></pre></p> <p>Whether to use <code>sudo</code> or not depends on your system configuration.</p>"},{"location":"cli/","title":"Cli","text":"<p>The WayKey CLI consists of 5 main components (<code>press</code>, <code>release</code>, <code>click</code>, <code>mouse_move</code> and <code>device</code>). Each component will be described in detail below.</p>"},{"location":"cli/#press","title":"Press","text":"<p>Press takes one key code as an argument and presses the corresponding key. The key will not be released automatically (refer to <code>release</code> to release the key again). Optionally, a device can be specified with the <code>-d</code> flag.</p> <p>Examples: <pre><code>waykey press KEY_A\nwaykey press KEY_A -d ~/path/to/device.json\n</code></pre></p>"},{"location":"cli/#release","title":"Release","text":"<p>Release takes one key code as an argument and releases the corresponding key. The key must have been pressed before for this to have an effect (refer to <code>press</code> to press the key). Optionally, a device can be specified with the <code>-d</code> flag.</p> <p>Examples: <pre><code>waykey release KEY_A\nwaykey release KEY_A -d ~/path/to/device.json\n</code></pre></p>"},{"location":"cli/#click","title":"Click","text":"<p>Click takes one key code as an argument and clicks the corresponding key by both pressing and automatically releasing it after a short delay. Optionally, a device can be specified with the <code>-d</code> flag. It also has an optional <code>--delay</code> flag to specify the delay between pressing and releasing the key in seconds (default is 0s).</p> <p>Examples: <pre><code>waykey click KEY_A\nwaykey click KEY_A -d ~/path/to/device.json\nwaykey click KEY_A --delay 0.5\nwaykey click KEY_A -d ~/path/to/device.json --delay 0.5\n</code></pre></p>"},{"location":"cli/#mouse-move","title":"Mouse Move","text":"<p>Mouse Move takes two arguments, <code>x</code> and <code>y</code>, which specify the position to move the mouse to (absolute movement) or the distance to move the mouse by (relative movement). By default, the movement is relative. Absolute movement can be enabled with the <code>--absolute</code> flag. The mouse wheel can be scrolled with the <code>-w</code> flag, which takes an integer argument. It is not possible to combine wheel movement with absolute mouse movement. Optionally, a device can be specified with the <code>-d</code> flag.</p> <p>Examples: <pre><code>waykey mouse_move 100 100\nwaykey mouse_move 100 100 -d ~/path/to/device.json\nwaykey mouse_move 100 100 --absolute\nwaykey mouse_move 100 100 --absolute -d ~/path/to/device.json\nwaykey mouse_move 0 0 -w 100\nwaykey mouse_move 0 0 -w 100 -d ~/path/to/device.json\nwaykey mouse_move 200 200 -w -100\n</code></pre></p>"},{"location":"cli/#device","title":"Device","text":"<p>The device component is used to manage virtual input devices. It has 3 subcomponents (<code>list</code>, <code>load</code> and <code>unload</code>). Each subcomponent will be described in detail below.</p>"},{"location":"cli/#list","title":"List","text":"<p>List lists all currently loaded virtual input devices. The list shows the device ID and Name.</p> <p>Examples: <pre><code>waykey device list\n</code></pre></p>"},{"location":"cli/#load","title":"Load","text":"<p>Load takes the ID of a device as an argument and attempts to load that device.</p> <p>Examples: <pre><code>waykey device load my_device_id\n</code></pre></p>"},{"location":"cli/#unload","title":"Unload","text":"<p>Unload takes the ID of a device as an argument and attempts to unload that device.</p> <p>Examples: <pre><code>waykey device unload my_device_id\n</code></pre></p>"},{"location":"library/","title":"Library","text":"<p>The WayKey library provides a python interface to interact with the WayKey daemon. It mirrors the functionality of the CLI, but is much more performant.</p>"},{"location":"library/#building","title":"Building","text":"<pre><code>uv build\n</code></pre>"},{"location":"library/#usage","title":"Usage","text":""},{"location":"library/#importing","title":"Importing","text":"<pre><code>import WayKey as wk\n</code></pre>"},{"location":"library/#press","title":"Press","text":"<p>Presses a key.</p> <p>Arguments: - <code>code</code> (str | int): The key code to press (e.g. \"KEY_A\" or 42). - <code>device_id</code> (str, optional): ID of the device. If not provided, the default device will be used.</p> <pre><code>wk.press(\"KEY_A\")  # The integer key code can also be used directly\nwk.press(\"KEY_A\", device_id=\"my_device_id\")\n</code></pre>"},{"location":"library/#release","title":"Release","text":"<p>Releases a key.</p> <p>Arguments: - <code>code</code> (str | int): The key code to release (e.g. \"KEY_A\" or 42). - <code>device_id</code> (str, optional): ID of the device. If not provided, the default device will be used.</p> <pre><code>wk.release(\"KEY_A\")  # The integer key code can also be used directly\nwk.release(\"KEY_A\", device_id=\"my_device_id\")\n</code></pre>"},{"location":"library/#click","title":"Click","text":"<p>Clicks a key by pressing and releasing it.</p> <p>Arguments: - <code>code</code> (str | int): The key code to click (e.g. \"KEY_A\" or 42). - <code>device_id</code> (str, optional): ID of the device. If not provided, the default device will be used. - <code>delay</code> (float, optional): Delay between pressing and releasing the key in seconds. Default is 0.</p> <pre><code>wk.click(\"KEY_A\")  # The integer key code can also be used directly\nwk.click(\"KEY_A\", device_id=\"my_device_id\")\nwk.click(\"KEY_A\", delay=0.5)\nwk.click(\"KEY_A\", device_id=\"my_device_id\", delay=0.5)\n</code></pre>"},{"location":"library/#mouse-move","title":"Mouse Move","text":"<p>Moves the mouse either absolutely or relatively, and can also scroll the mouse wheel.</p> <p>Arguments: - <code>x</code> (int): The x position to move the mouse to (absolute movement) or the distance to move the mouse by (relative movement). - <code>y</code> (int): The y position to move the mouse to (absolute movement) or the distance to move the mouse by (relative movement). - <code>w</code> (int, optional): Amount to scroll the mouse wheel. Default is 0 (no scrolling). This can not be used with absolute movement. - <code>absolute</code> (bool, optional): Whether to use absolute movement. Default is False (relative movement). - <code>device_id</code> (str, optional): ID of the device. If not provided, the default device will be used.</p> <pre><code>wk.mouse_move(100, 100)\nwk.mouse_move(100, 100, device_id=\"my_device_id\")\nwk.mouse_move(100, 100, absolute=True)\nwk.mouse_move(100, 100, absolute=True, device_id=\"my_device_id\")\nwk.mouse_move(0, 0, w=100)\nwk.mouse_move(0, 0, w=100, device_id=\"my_device_id\")\nwk.mouse_move(200, 200, w=-100)\n</code></pre>"},{"location":"library/#get-devices","title":"Get Devices","text":"<p>Returns a dictionary of all available devices.</p> <pre><code>devices = wk.get_devices()\nprint(devices)\n</code></pre>"},{"location":"library/#load-device","title":"Load Device","text":"<p>Loads a device by its ID.</p> <p>Arguments: - <code>device_id</code> (str): ID of the device to load.</p> <pre><code>wk.load_device(\"my_device_id\")\n</code></pre>"},{"location":"library/#unload-device","title":"Unload Device","text":"<p>Unloads a device by its ID.</p> <p>Arguments: - <code>device_id</code> (str): ID of the device to unload.</p> <pre><code>wk.unload_device(\"my_device_id\")\n</code></pre>"}]}